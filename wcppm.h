#ifndef _PPM_H
#define _PPM_H

#include <stdint.h>

#define PPM_HIGH 0
#define PPM_LOW 1
/**
 * Generate a PPM signal. 
 * 
 *
 * The PPM is generated by TIMER3 with the following parameters:
 * - Clear Timer on Compare match is enabled in TCCR3A: the timer 
 *   is reset when it reaches OCR3A
 * - Prescaler is set to f/8 in TCCR3B
 * - Output Compare Interrupt A is enabled in TIMSK3
 * 
 * TIMER3 has been tested on Arduino Leornardo. 
 * TIMER3 is not available on Arduino UNO, you should be able
 * to change for another timer by editing the code in wcppm.cpp.
 * 
 * 
 * TCNT3 is the counter value. It must be reset in the Interrupt 
 * Service Routine (ISR) TIMER3_COMPA_vect (in case the CTC didn't
 * work?)
 *
 * 
 * <code>Wcppm</code> manages 5 channels. The channel values 
 * are set with 
 * <code>PPM.setChannel(uint8_t channel, uint8_t value)</code>.
 * Values should be between  1000 and 2000, centered on 1500. 
 *
 *
 * A pulse is 300ms long. A frame is 20ms long. 
 *
 * 
 */

#define CHANNEL_COUNT 5
#define FRAME_LENGTH_US 11500
#define PULSE_LENGTH_US 300
#define PRESCALER_CONSTANT_MUL_US 2

#define FRAME_LENGTH_INC FRAME_LENGTH_US * PRESCALER_CONSTANT_MUL_US
#define PULSE_LENGTH_INC PULSE_LENGTH_US * PRESCALER_CONSTANT_MUL_US
 
class Wcppm {

	private:
		/** Sum all channels inc and corresponding pulse width, then computeFramePadding
		 *  the padding with respect of the frame length. */
		void computeFramePadding();
	public:
		/** holds the channels values */
		uint16_t channels[CHANNEL_COUNT];
		/** holds the padding of the PPM signal
		 *  ie the time "between" pulse trains 
		 */
		uint16_t padding;
		/** remaing time in the current frame */
		unsigned long remaining;
		unsigned long oldMicros;
		
		uint8_t current_channel;
		uint8_t state;
		uint8_t ppm_pin;
		
		/** Set the channel N value */
		void setChannel(uint8_t channelN, uint16_t channelValue);
		void begin(uint8_t ppm_pin);
		void getState();
};

extern Wcppm wPPM;


#endif